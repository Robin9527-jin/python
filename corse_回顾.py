# 运算符
    # 算术元运算符
    #   【+、-、*、/、//、%、**】
    #     列表可以与任何类型的数据做 + 运算
    #         list + tuple :tuple的元素末尾追加到list
    #         list + str :把字符串拆分成单个元素追加到列表
    #         list + dict:只会把dict的key添加到list
    #         不能与int相加
    #         使用方法可以传递任何数据类型
    # 比较（关系）运算符
    #     【==、!=、<、>、<=、>=】
    # 赋值运算符
    #     【=、+=、—=、*=、/=、//=、%=、**=】
    # 逻辑运算符（与/或/非）
    #     【and、or、not】
    # 成员运算符
    #     【in、not in】
    #     in:如果有返回True
    #     not in:如果没有返回True
    # 身份运算符
    #     【is、is not】
    #     is:判断a是否为b，是就返回True
    #     is not:判断a是否不是b，不是就返回True

    # 位运算符（对二进制运算）
    #     【&、｜、^、～、<<、>>】
    #     &：位与运算，两个数字的二进制相应位都为1，则结果为1，否则为0；
    #     ｜：位或运算，两个数字的二进制位有一个为1时，结果就为1
    #     ^：位异或运算，当两个数字的二进位相异时，结果为1
    #     ～：按位取反运算，对一个数字的二进制数取反，1变成0，0变成1
    #     <<:左移运算，二进制位进行左移若干位，高位去除，低位补0：2 << n  其中n为需要移动的位数
    #     >>:右移运算，二进制位进行右移若干位，高位去除，低位补0：2 >> n  其中n为需要移动的位数

    # 二进制
    # 在python中要想输出二进制，八进制，十六进制需要使用一下函数
    # bin(int/str[index]) 输出以0b开头的二进制数 0b11
    # oct(int/str[index]) 输出以0o开头的八进制数 0o11
    # hex(int/str[index]) 输出以0x开头的十六进制数 0x11

    # 运算符的优先级
    # 幂运算 > 位非运算 > (乘/除/整除/取余/矩阵乘) > (加/减) > (位移) > 位与 > 位异或 > 位或 > (比较运算符/成员运算符/身份运算符)
    # > 非 > 与 > 或 > 条件表达式 > lambda表达式 > 赋值运算符





# python中的数据类型
#     主要分为两大类
#         一，数字型
#         1，int,float,True,False
#         二，非数字型
#         1,str,list,tuple,dictionary,set

    # 列表的特征：1,使用中括号[]定义；2，数据是有序的；3，数据类型不限；4，可以进行增删改查、排序等操作
    # 常用操作方法：
    #     1，查：常用方法：
#         list[index]
#         for循环遍历
#           list.index(keyword)
    #     2，增/修改
    #     增：insert(index,keyword)，append(keyword/list/list[index]),extend(list)
    #     改：list[keyword]=value
    #     3，删除
    #     remove(keyword):
    #     pop(index):
    #     clear(list):
        # del: list[index]
        # 排序
        # sort()：默认reverse=False
        # sort(reverse=True)
        # reverse(list)
        # 4，统计
        # count(keyword):
        # len(list)函数:
        # 5,常用操作符
        # + ：两个列表相加合并为一个新列表
        # * ：列表相乘，元素会重复输出
        # 6，复制
        # copy() == list[0:]

    # 元组的特征：1，使用小括号()定义；2，数据是有序的；3，数据类型不限；4，元组定义后不可被修改
    # 元组的蝉蛹操作方法：
    #     1，查:
        # tuple[index]
        # tuple.index(keyword)
        # 2，统计：
        # count(keyword)
        # len(tuple)

    # 字典的特征：1，使用大括号{}定义；2，数据是有序的；3，数据类型不限，但key的类型仅限（str/int/tuple）;4,字典定义后key不可修改
    # 字典的常用操作方法
    # 1，查
    #     dict.get(key)
    #     dict[key]
    # 2，增/改
    #     dict[key]=value
    # 3，删除
    # dict.pop(key)
    # 4,统计
    # len(dict)
    # 5,清空
    # dict.clear()
    # 6,更新/合并
    # dict.update(dict1)

# 字符串的常用方法
#     判断类型
#     str.isalnum()
#     str.isalpha()
#     str.islower()
#     str.isspace()
#     str.istitle()
#     str.isascii()
#     str.isdecimal() #全是阿拉伯数字则返回True
#     str.isdigit()
#     str.isupper()
#     查找和替换
#     str.startswith("str") #是否以某个字符串开始
#     str.endswith("str") #是否以某个字符串结束
#     str.find("str",__start=0,__end=len(str)) #在指定范围内查找某个字符串,有就返回第一个索引位置，没有则返回-1
#     str.replace(oldstr,newstr) #替换字符串,会返回一个新的字符串
#     文本对齐
#     str.ljust(width=宽度，fillchar=填充的内容)  #文本左对齐
#     str.rjust(width=宽度，fillchar=填充的内容) #文本右对齐
#     str.center(width=宽度，fillchar=填充的内容) #文本居中对齐
#     去除文本中的空白/空格字符
#     str.strip() #去除字符串两边的空白/空格字符
#     字符串拆分和拼接
#     str.split() #将一个大字符串拆分成若干个字符串，同事去除所有的空白符，并以列表的形式返回
#     str.join() #合并拆分的字符串

# 函数
# 缺省参数
# 如果定义函数时，其中一个参数的值不确定，则不能作为缺省参数
# 缺省参数的值应该时最常见的值，比如：True/False
# 缺省参数定义的位置应该是在最后一个参数的位置
# def fonc(name,gender=True):
#     pass
# 函数具有多个缺省参数时，调用函数时必须给某个需要传递的缺省参数指定一个值
# def fonc(name,tatle="",gender=True):
#     pass

# d多值参数
# *args:可以接收元组类型的参数，*号表示复数
# **kwargs:可以接收字典类型的参数
# 给多值参数命名时，尽量使用一下两个名字：
#     *args --存放元组，前面有一个*
#     **kwargs  --存放字典，前面有两个**
#
# args:arguments的缩写，变量的意思
# kw:keyword的缩写

# 元组和字典的拆包的语法
# 如果调用一个具有多值参数的函数时，想要把元组/字典的变量作为参数传递给函数，可以使用拆包的方法
# 语法：在args前面加一个 * 号；在kwargs参数前面加两个 *
# 如：
# fonc(*tup,**dict)
# fonc(*tup,**dict) 等价于 直接传递元组的多个值，和字典的多个键值对


# 作用域（scope）：
#     变量产生作用的区域：
#         全局作用域：程序执行时创建，执行结束销毁，创建在函数外部的区域
#         函数作用域：也叫局部作用域，在函数调用时创建，调用结束销毁，每调用一次就会产生一个作用域

# 变量的查找：
    # 当我们需要使用变量时，会优先在当前作用域查找，如果没有找到则继续向上一级作用域查找，以此类推，如果没有找到则会报错

# 命名空间（namespace）：
#     命名空间值得是变量保存的位置，每一个变量都会保存在指定的命名空间中
#     每一个作用域都有一个自己的命名空间
#     全局命名空间：用来保存全局变量
#     函数命名空间：用来保存局部变量/函数变量
#     命名空间实际上就是一个字典，用来保存变量

# locals()函数用来获取当前作用域的命名空间
#     在全局作用域中调用，则获取全局命名空间，在函数内部调用则获取局部命名空间
#     获取命名空间会返回一个字典

# 递归函数
# 特点：
#   递归函数可以在函数内部调用其他函数，也可以调用自己
# 代码特点：
    # 函数内部的代码是相同的，只是针对参数不同，处理结果也不同
    # 当参数满足一个条件时，递归函数不在执行
    #     这一点很重要，相当于函数的出口，如果没有则会无限循环

# 函数式编程：
#     函数是一等对象，一等对象具有一下特点：
#     1，对象是在运行时创建的
#     2，能赋值给变量或作为数据结构中的元素
#     3，能作为参数传递
    # 4，能作为返回值

# 高阶函数：
#     至少符合一下两个特点中的一个：
#     1,能接收一个或多个函数作为参数
#         把函数作为参数传递时，等于把函数的代码传递给另一个函数
        # 把函数作为参数传递时，只需要写函数名就可以

    # 2，能把函数最为返回值返回
    #     这种函数也叫闭包，只要使用闭包，必定出现函数嵌套
    #     当我们需要使用的变量想要仅仅是被内部调用时，需要用到闭包

# 匿名函数（语法糖）
#   只能写一些简单的表达式
#   lambda 参数 ：返回值（处理表达式）

# 装饰器引入
#     在不修改原函数的情况下，对该函数的功能做扩展
#     定义装饰器函数时，可以把原函数作为参数传递给装饰器
#     一般使用old()函数来调用被扩展的函数
#     装饰器定义时结构如下：
#     def fonc(old):
#         前置扩展
#         ret = old(old)
#         后置扩展
#         return ret





# 面向对象的概念

# 对象：
#     对象是由类创造出来的一个具体存在的事物，可以直接使用
#     对象具有跟类相同的属性和方法
#     对象就是类的实例，如果多个对象都有一个类创建，那么这些对象都是一类对象
    # 在开发中，应该先由类再有对象
    # 在python中，一切皆对象，变量，函数，数据都是对象
    # 在数据/函数/变量后面输入一个 . 再按TAB键就可以看到对象能够调用的方法
    # 使用内置函数 dir(object) 就可以看到对象内置的方法和属性
    #     调用内置方法和属性，必须使用对象名调用
    #     如：print.__doc__ ,不能是print().__doc__
# 对象的生命周期：
#     当类被调用时创建对象，生命周期开始 ～ 对象的__del__方法被调用，生命周期结束



# 类的定义
# class ClaTest():
#     # 类方法的定义与函数的定义唯一区别就是方法的第一个参数必须是self
#     def num(self):
#         pass



